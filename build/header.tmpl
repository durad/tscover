let __fileHash__=Function("return this")();{let global=__fileHash__;global.__tscover__=global.__tscover__||{hash:"__projectHash__",data:{}};let projectHash="__projectHash__",tscover=global.__tscover__,coverageData=tscover.data;coverageData.__filename__=coverageData.__filename__||{s:__statements__,b:__branches__,hash:"__fileHash__",sourceCode:__sourceCode__};let r=eval("require"),fs="function"==typeof r?r("fs"):null,path="function"==typeof r?r("path"):null,process=global.process||null;if(process&&process.argv&&process.argv.indexOf("--autosavecover")>=0&&!tscover.scheduleLcovSave){tscover.scheduleLcovSave=!0;let e=process.argv.indexOf("--autosavecover");process.argv.splice(e,1);for(let e of["beforeExit","exit","SIGINT","SIGTERM"])process.on(e,()=>{tscover.lcovOnExitSaved||(tscover.lcovOnExitSaved=!0,tscover.saveCoverage(),tscover.saveLcov(),tscover.saveReport())})}tscover.generateCoverage||(tscover.generateCoverage=function(){let e={hash:projectHash,totalLineCount:0,totalLineCovered:0,totalLineCoverage:0,totalStatCount:0,totalStatCovered:0,totalStatCoverage:0,totalBranchCount:0,totalBranchCovered:0,totalBranchCoverage:0,files:[]};for(let t in coverageData){let o=coverageData[t],s=0,r=0,a=0,n={},c=[];for(let e of o.s)s++,e.c>0&&r++,n[e.l]||(n[e.l]={l:e.l,c:0},c.push(n[e.l])),n[e.l].c+=e.c;0!==s&&(a=r/s);let h=0,l=0;c.sort(function(e,t){return e.l-t.l});for(let e of c)e.c&&h++;0!==c.length&&(l=h/c.length);let i=0,v=0;for(let e of o.b)e.c[0]>0&&e.c[1]>0&&i++;0!==o.b.length&&(v=i/o.b.length),e.files.push({hash:o.hash,filePath:t,statementsCount:s,statementsCovered:r,statementsCoverage:a,lineCount:c.length,lineCovered:h,lineCoverage:l,branchCount:o.b.length,branchCovered:i,branchCoverage:v,lines:c,statements:o.s,branches:o.b,sourceCode:o.sourceCode}),e.totalStatCount+=s,e.totalStatCovered+=r,e.totalLineCount+=c.length,e.totalLineCovered+=h,e.totalBranchCount+=o.b.length,e.totalBranchCovered+=i}return e.files.sort(function(e,t){return e.filePath==t.filePath?0:e.filePath>t.filePath?1:-1}),0!==e.totalStatCount&&(e.totalStatCoverage=e.totalStatCovered/e.totalStatCount),0!==e.totalBranchCount&&(e.totalBranchCoverage=e.totalBranchCovered/e.totalBranchCount),0!==e.totalLineCount&&(e.totalLineCoverage=e.totalLineCovered/e.totalLineCount),e}),tscover.generateLcov||(tscover.generateLcov=function(e){let t=tscover.generateCoverage(),o=[];for(let s of t.files){let t=s.filePath;e&&(t=t.replace(e.from,e.to)),o.push("TN:"),o.push(`SF:${t}`),o.push("FNF:0"),o.push("FNH:0");for(let e of s.lines)o.push(`DA:${e.l+1},${e.c}`);o.push(`LF:${s.statementsCount}`),o.push(`LH:${s.statementsCovered}`);for(let e=0;e<s.branches.length;e++)o.push(`BRDA:${s.branches[e].l+1},${e+1},0,${s.branches[e].c[0]}`),o.push(`BRDA:${s.branches[e].l+1},${e+1},1,${s.branches[e].c[1]}`);o.push(`BRF:${s.branchCount}`),o.push(`BRH:${s.branchCovered}`),o.push("end_of_record")}return o.join("\n")}),tscover.saveLcov||(tscover.saveLcov=function(e=".",t){e=path.join(e,"coverage"),fs.existsSync(e)||fs.mkdirSync(e);let o=tscover.generateLcov(t);fs.writeFileSync(path.join(e,"lcov.info"),o,"utf8")}),tscover.generateReport||(tscover.generateReport=function(e=".",t){let o=tscover.generateCoverage(),s=[];s.push("<html>"),s.push("<head>"),s.push("<style>"),s.push(`.viewer${projectHash}{position:absolute;left:0;top:0;bottom:0;right:0}.filelist${projectHash}{position:absolute;left:0;top:0;bottom:0;width:200px;font-family:Arial,Helvetica,sans-serif;font-size:13px;background-color:#eee;border-right:1px solid #ccc;box-shadow:0 0 10px rgba(0,0,0,.2);overflow:hidden;z-index:10}.filecontainer${projectHash}{position:relative}.filecontainer${projectHash}:hover{background-color:#ddd;cursor:pointer}.filecontainer${projectHash}.active${projectHash}{background-color:#6af;color:#fff}.filepath${projectHash}{width:150px;padding:4px 0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;direction:rtl;text-align:right;unicode-bidi:plaintext}.filestat${projectHash}{position:absolute;right:3px;top:0;box-sizing:border-box;padding:4px 0}.filestat${projectHash}.green${projectHash}{color:#082}.filestat${projectHash}.red${projectHash}{color:#802}.filecontent${projectHash}{display:none;position:absolute;left:200px;top:0;bottom:0;right:0;font-family:Consolas,'Courier New',monospace;font-size:14px}.filecontent${projectHash}.active${projectHash}{display:block}.linenumbers${projectHash}{position:absolute;left:0;top:0;bottom:0;width:40px;background-color:#fff;border-right:2px solid #adf;box-sizing:border-box;margin:0}.linenumber${projectHash}{text-align:right;padding-right:3px}.source${projectHash}{position:absolute;left:40px;top:0;right:0;bottom:0;margin:0;tab-size:4}.line${projectHash}{display:inline-block;width:100%;padding-left:4px;box-sizing:border-box}.line${projectHash}.covered${projectHash}{background-color:#dfd}.line${projectHash}.noncovered${projectHash}{background-color:#fdd}`),s.push("</style>"),s.push("</head>"),s.push("<body>"),s.push(`<div class="viewer${projectHash}">`),s.push(`<div class="filelist${projectHash}">`);for(let e of o.files){s.push(`<div class="filecontainer${projectHash} filecontainer${e.hash} ${e===o.files[0]?"active"+projectHash:""}" onclick="selectFile('${e.hash}')">`),s.push(`<div class="filepath${projectHash}">${e.filePath}</div>`);let t=`${Math.round(1e3*e.lineCoverage)/10}%`,r=1===e.lineCoverage?"green":"red";s.push(`<div class="filestat${projectHash} ${r}${projectHash}">${t}</div>`),s.push(`</div>`)}s.push("</div>"),s.push(`<div class="filecontents${projectHash}">`);for(let e of o.files){let t=[],r=[],a={};for(let t of e.lines)a[t.l]=t.c;let n=e.sourceCode,c=[];for(let t of e.branches)0===t.c[0]?c.push({pos:t.s,content:"[B]"}):0===t.c[1]&&c.push({pos:t.s,content:"[B]"});c.sort(function(e,t){return e.pos-t.pos});let h=[],l=0;for(let e of c)h.push(n.substring(l,e.pos)),h.push(e.content),l=e.pos;h.push(n.substring(l)),n=h.join(""),n=n.replace(/\r/g,"");let i=n.split("\n");for(let e=0;e<i.length;e++){r.push(`<div class="linenumber${projectHash}">${e+1}</div>`);let o=void 0!==a[e]?0===a[e]?`noncovered${projectHash}`:`covered${projectHash}`:"";t.push(`<span class="line${projectHash} ${o}">${i[e]}</span>`)}s.push(`<div class="filecontent${projectHash} filecontent${e.hash} ${e===o.files[0]?"active"+projectHash:""}">`),s.push(`<div class="linenumbers${projectHash}">${r.join("\n")}</div>`),s.push(`<pre class="source${projectHash}">${t.join("\n")}</pre>`),s.push(`</div>`)}return s.push("</div>"),s.push("</div>"),s.push("<script>"),s.push(`
\t\t\tfunction removeClass(e, cls) {
\t\t\t\tvar reg = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');
\t\t\t\te.className = e.className.replace(reg,' ');
\t\t\t}

\t\t\tfunction addClass(e, cls) {
\t\t\t\te.className = e.className + ' ' + cls;
\t\t\t}

\t\t\tfunction selectFile(fileHash) {
\t\t\t\tremoveClass(document.querySelector('.filecontainer${projectHash}.active${projectHash}'), 'active${projectHash}');
\t\t\t\tremoveClass(document.querySelector('.filecontent${projectHash}.active${projectHash}'), 'active${projectHash}');
\t\t\t\taddClass(document.querySelector('.filecontainer' + fileHash), 'active${projectHash}');
\t\t\t\taddClass(document.querySelector('.filecontent' + fileHash), 'active${projectHash}');
\t\t\t}
\t\t`),s.push("<\/script>"),s.push("</body>"),s.push("</html>"),s.join("\n")}),tscover.saveReport||(tscover.saveReport=function(e=".",t){e=path.join(e,"coverage"),fs.existsSync(e)||fs.mkdirSync(e);let o=tscover.generateReport();fs.writeFileSync(path.join(e,"coverage.html"),o,"utf8")}),tscover.saveCoverage||(tscover.saveCoverage=function(e="."){e=path.join(e,"coverage"),fs.existsSync(e)||fs.mkdirSync(e);let t=tscover.generateCoverage();fs.writeFileSync(path.join(e,"coverage.json"),JSON.stringify(t,null,2),"utf8")})}__fileHash__=__fileHash__.__tscover__.data.__filename__;